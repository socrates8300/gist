### ./src/viewer.rs

```rust
use crate::Gist;
use chrono::Local;
use clipboard::{ClipboardContext, ClipboardProvider};
use crossterm::{
    event::{self, DisableMouseCapture, EnableMouseCapture, Event, KeyCode},
    execute,
    terminal::{disable_raw_mode, enable_raw_mode, EnterAlternateScreen, LeaveAlternateScreen},
};
use ratatui::{
    backend::CrosstermBackend,
    layout::{Constraint, Direction, Layout},
    style::{Color, Style},
    widgets::{Block, Borders, List, ListItem, ListState, Paragraph},
    Terminal,
};
use std::{error::Error, io, process::Command};

// ----- App state -----
struct AppState {
    all_gists: Vec<Gist>,
    filtered_gists: Vec<Gist>,
    selected: usize,
    list_state: ListState,
    is_searching: bool,
    search_query: String,
}

impl AppState {
    fn new(gists: Vec<Gist>) -> Self {
        let mut s = AppState {
            filtered_gists: gists.clone(),
            all_gists: gists,
            selected: 0,
            list_state: ListState::default(),
            is_searching: false,
            search_query: String::new(),
        };
        s.list_state.select(Some(0));
        s
    }
    fn reload(&mut self) {
        self.filtered_gists = self.all_gists.clone();
        self.selected = 0;
        self.list_state.select(Some(0));
    }
    fn reset_filter(&mut self) {
        self.reload();
        self.search_query.clear();
    }
    fn do_search(&mut self) {
        let q = self.search_query.to_lowercase();
        self.filtered_gists = self
            .all_gists
            .iter()
            .filter(|g| g.content.to_lowercase().contains(&q) || g.tags.to_lowercase().contains(&q))
            .cloned()
            .collect();
        self.selected = 0;
        self.list_state.select(Some(0));
    }
}

pub fn run_ui(gists_storage: &mut Vec<Gist>) -> Result<(), Box<dyn Error>> {
    enable_raw_mode()?;
    let mut stdout = io::stdout();
    execute!(stdout, EnterAlternateScreen, EnableMouseCapture)?;
    let backend = CrosstermBackend::new(stdout);
    let mut terminal = Terminal::new(backend)?;

    let initial_data = gists_storage.clone();
    let mut state = AppState::new(initial_data);

    loop {
        terminal.draw(|f| {
            let vert = Layout::default()
                .direction(Direction::Vertical)
                .constraints([Constraint::Min(0), Constraint::Length(1)])
                .split(f.area());

            let chunks = Layout::default()
                .direction(Direction::Horizontal)
                .constraints([Constraint::Percentage(30), Constraint::Percentage(70)])
                .split(vert[0]);

            let items: Vec<_> = state
                .filtered_gists
                .iter()
                .map(|g| ListItem::new(format!("#{} {}", g.id, g.tags)))
                .collect();

            let list = List::new(items)
                .block(Block::default().borders(Borders::ALL).title("Gists"))
                .highlight_style(Style::default().bg(Color::Blue));

            f.render_stateful_widget(list, chunks[0], &mut state.list_state);

            let content = state
                .filtered_gists
                .get(state.selected)
                .map(|g| g.content.as_str())
                .unwrap_or("(no gists)");

            let paragraph = Paragraph::new(content)
                .block(Block::default().borders(Borders::ALL).title("Content"));

            f.render_widget(paragraph, chunks[1]);

            let info = if state.is_searching {
                format!("/ {}", state.search_query)
            } else {
                "↑↓ j/k Navigate  a:Add  e:Edit  y:Yank  s or /:Search  q:Quit".to_string()
            };
            let bar = Paragraph::new(info).style(Style::default().fg(Color::Yellow));
            f.render_widget(bar, vert[1]);
        })?;

        if crossterm::event::poll(std::time::Duration::from_millis(200))? {
            if let Event::Key(key) = event::read()? {
                if state.is_searching {
                    match key.code {
                        KeyCode::Esc => {
                            state.is_searching = false;
                            state.reset_filter();
                        }
                        KeyCode::Enter => {
                            state.is_searching = false;
                            state.do_search();
                        }
                        KeyCode::Backspace => {
                            state.search_query.pop();
                        }
                        KeyCode::Char(c) => {
                            state.search_query.push(c);
                        }
                        _ => {}
                    }
                } else {
                    match key.code {
                        KeyCode::Char('q') => break,
                        KeyCode::Char('s') | KeyCode::Char('/') => {
                            state.is_searching = true;
                            state.search_query.clear();
                        }
                        KeyCode::Down | KeyCode::Char('j') => {
                            if state.selected + 1 < state.filtered_gists.len() {
                                state.selected += 1;
                            }
                            state.list_state.select(Some(state.selected));
                        }
                        KeyCode::Up | KeyCode::Char('k') => {
                            if state.selected > 0 {
                                state.selected -= 1;
                            }
                            state.list_state.select(Some(state.selected));
                        }
                        KeyCode::Char('y') => {
                            if let Some(gist) = state.filtered_gists.get(state.selected) {
                                if let Ok(mut ctx) = ClipboardContext::new() {
                                    let _ = ctx.set_contents(gist.content.clone());
                                }
                            }
                        }
                        KeyCode::Char('a') => {
                            disable_raw_mode()?;
                            let tmp = std::env::temp_dir().join("gist_new.txt");
                            let _ = Command::new("nvim").arg(&tmp).status();
                            let content = std::fs::read_to_string(&tmp).unwrap_or_default();
                            std::fs::remove_file(&tmp).ok();
                            if content.trim().is_empty() {
                                enable_raw_mode()?;
                                continue;
                            }
                            let created_at = Local::now().to_rfc3339();
                            let new_id =
                                state.all_gists.iter().map(|g| g.id).max().unwrap_or(0) + 1;
                            let new_gist = Gist {
                                id: new_id,
                                tags: "".to_string(),
                                content,
                                created_at,
                            };
                            state.all_gists.push(new_gist.clone());
                            gists_storage.push(new_gist);
                            enable_raw_mode()?;
                            state.reload();
                        }
                        KeyCode::Char('e') => {
                            if let Some(gist) = state.filtered_gists.get(state.selected) {
                                disable_raw_mode()?;
                                let tmp = std::env::temp_dir().join("gist_edit.txt");
                                let _ = std::fs::write(&tmp, &gist.content);
                                let _ = Command::new("nvim").arg(&tmp).status();
                                let updated = std::fs::read_to_string(&tmp).unwrap_or_default();
                                std::fs::remove_file(&tmp).ok();
                                if updated.trim().is_empty() {
                                    enable_raw_mode()?;
                                    continue;
                                }
                                // update in full list
                                for g in gists_storage.iter_mut() {
                                    if g.id == gist.id {
                                        g.content = updated.clone();
                                    }
                                }
                                enable_raw_mode()?;
                                state.all_gists = gists_storage.clone();
                                state.do_search();
                            }
                        }
                        _ => {}
                    }
                }
            }
        }
    }
    disable_raw_mode()?;
    execute!(
        terminal.backend_mut(),
        LeaveAlternateScreen,
        DisableMouseCapture
    )?;
    terminal.show_cursor()?;
    Ok(())
}

```

### ./src/main.rs

```rust
#![allow(unused)]
mod viewer;

use clap::{Parser, Subcommand};
use colored::*;
use rusqlite::{params, Connection, Result as SqlResult};
use serde::{Deserialize, Serialize};
use std::{
    env,
    error::Error,
    fs,
    io::{Read, Write},
    process::Command,
};
use tempfile::NamedTempFile;
use tokio;

#[derive(Debug, Clone)]
pub struct Gist {
    pub id: i64,
    pub content: String,
    pub tags: String,
    pub created_at: String,
}

#[derive(Parser)]
#[command(author, version, about)]
struct Cli {
    #[command(subcommand)]
    command: Commands,
}

#[derive(Subcommand)]
enum Commands {
    Add,
    Update { id: i64 },
    Search { query: String },
    View { id: i64 },
    List,
    UI,
}

fn get_gist_dir() -> Result<std::path::PathBuf, Box<dyn std::error::Error>> {
    // ALWAYS base dir on current user's home, resolved dynamically and portable
    let home = dirs::home_dir().ok_or("Could not determine home directory")?;
    let dir = home.join(".config").join("gist");

    std::fs::create_dir_all(&dir)?; // Create if missing
    Ok(dir)
}

fn init_db() -> Result<Connection, Box<dyn Error>> {
    let db = get_gist_dir()?.join("gists.db");
    let conn = Connection::open(db)?;
    conn.execute(
        "CREATE TABLE IF NOT EXISTS gists (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            content TEXT NOT NULL,
            tags TEXT,
            created_at DATETIME DEFAULT CURRENT_TIMESTAMP
        )",
        [],
    )?;
    Ok(conn)
}

fn insert_gist(c: &Connection, content: &str, tags: &str) -> SqlResult<i64> {
    c.execute(
        "INSERT INTO gists (content, tags) VALUES (?1, ?2)",
        params![content, tags],
    )?;
    Ok(c.last_insert_rowid())
}

fn update_gist(c: &Connection, id: i64, content: &str, tags: &str) -> SqlResult<()> {
    c.execute(
        "UPDATE gists SET content=?1, tags=?2 WHERE id=?3",
        params![content, tags, id],
    )?;
    Ok(())
}

fn get_gist(c: &Connection, id: i64) -> SqlResult<Gist> {
    c.query_row(
        "SELECT id, content, tags, created_at FROM gists WHERE id = ?1",
        params![id],
        |r| {
            Ok(Gist {
                id: r.get(0)?,
                content: r.get(1)?,
                tags: r.get(2)?,
                created_at: r.get(3)?,
            })
        },
    )
}

fn search_gists(c: &Connection, query: &str) -> SqlResult<Vec<Gist>> {
    let like = format!("%{}%", query);
    let mut stmt = c.prepare(
        "SELECT id, content, tags, created_at FROM gists
         WHERE content LIKE ?1 OR tags LIKE ?1 ORDER BY created_at DESC",
    )?;
    let res = stmt.query_map(params![like], |r| {
        Ok(Gist {
            id: r.get(0)?,
            content: r.get(1)?,
            tags: r.get(2)?,
            created_at: r.get(3)?,
        })
    })?;
    let mut out = Vec::new();
    for g in res {
        out.push(g?);
    }
    Ok(out)
}

fn list_gists(c: &Connection) -> SqlResult<Vec<Gist>> {
    let mut stmt =
        c.prepare("SELECT id, content, tags, created_at FROM gists ORDER BY created_at DESC")?;
    let res = stmt.query_map([], |r| {
        Ok(Gist {
            id: r.get(0)?,
            content: r.get(1)?,
            tags: r.get(2)?,
            created_at: r.get(3)?,
        })
    })?;
    let mut out = Vec::new();
    for g in res {
        out.push(g?);
    }
    Ok(out)
}

fn edit_content(initial: Option<&str>) -> Result<String, Box<dyn Error>> {
    let mut tmp = NamedTempFile::new()?;
    if let Some(s) = initial {
        tmp.write_all(s.as_bytes())?;
    }
    let p = tmp.path();

    let ed = env::var("EDITOR").unwrap_or("nvim".into());
    let status = Command::new(ed).arg(p).status()?;
    if !status.success() {
        return Err("Editor exited with error".into());
    }
    let mut buf = String::new();
    fs::File::open(p)?.read_to_string(&mut buf)?;
    Ok(buf)
}

#[derive(Serialize)]
struct ChatRequest {
    model: String,
    messages: Vec<ChatMessage>,
    temperature: f32,
}
#[derive(Serialize)]
struct ChatMessage {
    role: String,
    content: String,
}
#[derive(Deserialize)]
struct ChatResponse {
    choices: Vec<ChatChoice>,
}
#[derive(Deserialize)]
struct ChatChoice {
    message: ChatMessageResponse,
}
#[derive(Deserialize)]
struct ChatMessageResponse {
    role: String,
    content: String,
}

async fn get_tags(content: &str) -> Result<String, Box<dyn Error>> {
    let key = env::var("OPENROUTER_API_KEY")?;
    let reqbody = serde_json::json!({
        "model": "openai/gpt-4o",
        "messages": [{"role":"user","content":format!("Extract 3-5 relevant tags separated by commas:\n{}",content)}],
        "temperature":0.1,
    });
    let c = reqwest::Client::new();
    let r = c
        .post("https://openrouter.ai/api/v1/chat/completions")
        .header("Authorization", format!("Bearer {}", key))
        .json(&reqbody)
        .send()
        .await?;
    if !r.status().is_success() {
        return Err(format!("API error: {}", r.text().await?).into());
    }
    let resp: ChatResponse = r.json().await?;
    Ok(resp
        .choices
        .first()
        .map(|c| c.message.content.trim().to_string())
        .unwrap_or_default())
}

fn display_gist(g: &Gist) {
    println!(
        "{} {}\n{} {}\n{} {}\n\n{}",
        "ID:".bold(),
        g.id.to_string().green(),
        "Created:".bold(),
        g.created_at,
        "Tags:".bold(),
        g.tags.cyan(),
        g.content
    );
    println!("{}", "-".repeat(50).dimmed());
}

fn display_gist_preview(g: &Gist) {
    let prev = g.content.lines().take(3).collect::<Vec<_>>().join(" ");
    println!(
        "{} {} {} {} {} {}\n{}",
        "ID".bold(),
        g.id.to_string().green(),
        "| Time:".bold(),
        g.created_at,
        "| Tags:".bold(),
        g.tags.cyan(),
        prev
    );
    println!("{}", "-".repeat(40).dimmed());
}

#[tokio::main]
async fn main() -> Result<(), Box<dyn Error>> {
    let cli = Cli::parse();
    let conn = init_db()?;

    match cli.command {
        Commands::Add => {
            let content = edit_content(None)?;
            if content.trim().is_empty() {
                println!("Nothing saved.");
                return Ok(());
            }
            let tags = get_tags(&content).await.unwrap_or("untagged".into());
            let id = insert_gist(&conn, &content, &tags)?;
            println!("Saved as {}", id);
        }

        Commands::Update { id } => {
            let old = get_gist(&conn, id)?;
            let content = edit_content(Some(&old.content))?;
            if content.trim().is_empty() {
                println!("Nothing updated");
                return Ok(());
            }
            let tags = get_tags(&content).await.unwrap_or(old.tags);
            update_gist(&conn, id, &content, &tags)?;
            println!("Updated");
        }

        Commands::View { id } => {
            display_gist(&get_gist(&conn, id)?);
        }

        Commands::Search { query } => {
            let v = search_gists(&conn, &query)?;
            if v.is_empty() {
                println!("No results.");
            }
            for g in &v {
                display_gist_preview(g);
            }
        }

        Commands::List => {
            let v = list_gists(&conn)?;
            if v.is_empty() {
                println!("No saved gists.");
            }
            for g in &v {
                display_gist_preview(g);
            }
        }

        Commands::UI => {
            let mut all = list_gists(&conn)?;
            if all.is_empty() {
                println!("No gists found. Add some first!");
                return Ok(());
            }
            viewer::run_ui(&mut all)?;
        }
    }
    Ok(())
}

```

